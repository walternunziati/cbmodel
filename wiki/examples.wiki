===Basic Usage===

{{{

import it.ppm.codebookmodel.*;
import codeanticode.gsvideo.*;
import java.util.*;

GSMovie myMovie;
CbModel Modello;
int frameDisplayed;

void setup(){
size(850, 350, P2D);
background(0);
frameDisplayed = 0;

Modello = new CbModel(this, 384, 288);
myMovie = new GSMovie(this, "walk1.mpg");
frameRate(25);
myMovie.loop();
}

void draw(){

     if(frameDisplayed <= 50)
     {
           if(myMovie.available())
           {
                 myMovie.read();
                 image(myMovie, 10, 50);
                 try{
                 Modello.updateModel(myMovie);
                 }
                 catch(LearningStateException Err){
                 println("Errore dello stato...");
                 }
                 catch(WrongSizeException Err){
                 println("Dimensione immagine non coerente...");
                 }
                 frameDisplayed ++;
           }
     }

     else{
           Modello.passTestState();
           if( Modello.isTestState() )
           {
                 if(myMovie.available())
                 {
                       myMovie.read();
                       image(myMovie, 10, 50);
                       try{
                       image(Modello.getDifferenceImage(myMovie), 456, 50);
                       }
                       catch(WrongSizeException Err){
                       println("Dimension");
                       }
                       catch(LearningStateException Err){
                       println("Learn");
                       }
                       frameDisplayed ++;
                 }
           }
    }

} 

}}}
 
===Advanced Usage===

In this example yuo can change some parameters, such as:
 _alpha_ - brightness'parameter ,between 0.2-0.7 . <br>
 _beta_ - brightness'parameter, tipically between 1.1-1.8 . <br>
 _epsilon_1_ - max tollerance of brightenns's deviation and the color of a pixel(in order  too recognise a pixel from another) phase's "Learning". <br>
 _epsilon_2_ - max tollerance of brightenns's deviation and the color of a pixel(in order too recognise a pixel from another) phase's "Testing".<br>
 _percent_tm_ - temporal threshold's parameter,tipically is 0.7.

{{{

import it.ppm.codebookmodel.*;
import codeanticode.gsvideo.*;
import java.util.*;

GSMovie myMovie;
CbModel	Modello;

PImage img_play;
PImage img_stop;
PFont font;
int frameDisplayed;
boolean mouseX_play;
boolean mouseY_play;
boolean mouseXis_over;
boolean mouseYis_over;
boolean avoid_writing;
boolean isPlaying;
int i = 0;
int select = -1;
float alfa;
float beta;
float e1;
float e2;
float tm;
float input;
int[] inputValue;
String s;


void setup(){
  size(850, 600, P2D);
  background(0);
  frameDisplayed = -1;
  alfa = 0.2;
  beta = 1.4;
  e1 = 0.1;
  e2 = 0.1;
  tm = 0.9;
  mouseX_play = false;
  mouseY_play = false;
  mouseXis_over = false;
  mouseYis_over = false;
  avoid_writing = false;
  isPlaying = false;
  inputValue = new int[3];
  font = loadFont("ArialMT-32.vlw");
  img_play = loadImage("play.png");
  img_stop = loadImage("stop.png");
  image(img_play, 410, 500);
    
  textFont(font);  
  text("Original", 136, 32);
  text("Processed", 582, 32);
  textFont(font, 12); 
  text("it could be changed at runtime", 40, 590);
  textFont(font, 20);  
  text("Parameters", 30, 400);
  text("Insert new value", 170, 400);
  text("Frames:", 600, 400);
  textFont(font, 15);  
  text("alpha         " + "  " , 30, 430);
  rect(200, 415, 70, 20);
  text("beta          " + "   " , 30, 460);
  rect(200, 445, 70, 20);
  text("tm            " + "     " , 30, 490);
  rect(200, 475, 70, 20);
  text("epsilon 1 " + "   " , 30, 520);
  rect(200, 505, 70, 20);
  text("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - " , 30, 535);
  text("epsilon 2 " + "   " , 30, 550);
  text("*", 100, 550);
  text("*", 30, 595);
  rect(200, 535, 70, 20);
  rect(0, 350, 850, 5);
    
  myMovie = new GSMovie(this, "walk1.mpg");
  frameRate(25); 
}


void draw(){
  
    if( mouseX >= 410 && mouseX <= 442 )
    {
       mouseX_play = true;
    }
    else mouseX_play = false;
     
    if( mouseY >= 500 && mouseY <= 532 )
    {
       mouseY_play = true;
    }
    else mouseY_play = false;
  
    if( mouseX >= 200 && mouseX <= 270 )
    {
       mouseXis_over = true;
    }
    else mouseXis_over = false;
     
    if( (mouseY >= 415 && mouseY <= 435) || (mouseY >= 445 && mouseY <= 465) || (mouseY >= 475 && mouseY <= 495) 
        || (mouseY >= 505 && mouseY <= 525) || (mouseY >= 535 && mouseY <= 555) )
    {
       mouseYis_over = true;
       
       if(mouseY<435)
           select = 1;
       else if(mouseY<465)
           select = 2;
       else if(mouseY<495)
           select = 3;
       else if(mouseY<525)
           select = 4;
       else if(mouseY<555)
           select = 5;
       
    }
    else mouseYis_over = false;
    
    
    stroke(0);  
    textFont(font, 15);
    fill(0);
    rect(395, 12, 70, 30);
    rect(680, 375, 45, 40);
     
    if(frameDisplayed >= 0)
    {
      if(frameDisplayed <= 50) 
      {  
          if(myMovie.available()) 
          {             
             myMovie.read(); 
             image(myMovie, 10, 50);
             fill(255); 
             text("Learning", 400, 32);
             fill(255, 0, 0);
             stroke(0);
             ellipseMode(CENTER);
             ellipse(380, 27, 20, 20);
             try{
	         Modello.updateModel(myMovie);
	        }
            catch(LearningStateException Err){
                 println("Errore dello stato...");
            }
            catch(WrongSizeException Err){
	         println("Dimensione immagine non coerente...");
            }
            fill(255); 
            text(frameDisplayed, 680, 400);
            frameDisplayed ++;
          }
      }      
      else{
            Modello.passTestState();
            if( Modello.isTestState() )
            {
                rect(395, 12, 120, 30);
                if(myMovie.available())
                {
                   myMovie.read(); 
                   image(myMovie, 10, 50);      
                   fill(255); 
                   text("Testing", 400, 32);
                   fill(0, 255, 0);
                   stroke(0);
                   ellipseMode(CENTER);
                   ellipse(380, 27, 20, 20); 
                   try{
	                 image(Modello.getDifferenceImage(myMovie), 456, 50);
                      }
                   catch(WrongSizeException Err){
                         println("Dimension");
                      }
                   catch(LearningStateException Err){
                         println("Learn");
                      }
                   fill(255); 
                   text(frameDisplayed, 680, 400);
                   frameDisplayed ++;
               }
          }
          else{
                 fill(255);
                 text("Building Model...", 400, 32);
              }
        }      
  
      }
           
}


void mouseClicked(){
  
  if( mouseXis_over == true && mouseYis_over == true )
    {
       avoid_writing = true;
       fill(255);
       stroke(255, 0, 0);
       rect(200, 385+select*30, 70, 20); 
    }
    else 
    {
       avoid_writing = false;
       fill(255);
       stroke(0);
       rect(200, 385+select*30, 70, 20);
       i = 0;
    }
    
    if( mouseX_play == true && mouseY_play == true )
    {
        if(isPlaying == true){
            myMovie.stop();
            isPlaying = false;
            frameDisplayed = -1;
            fill(0);
            rect(405, 500, 40, 40);
            image(img_play, 410, 500);
        }
        else if( frameDisplayed < 0 ){
                frameDisplayed = 0;                
                Modello = new CbModel(this, 384, 288, alfa, beta, e1, e2, tm, 0, 0xFFFFFFFF);
                isPlaying = true;
                myMovie.loop();
                  text("alpha         " + "  " + Modello.getAlpha(), 30, 430);
                  text("beta          " + "   " + Modello.getBeta(), 30, 460);
                  text("tm            " + "     " + Modello.getTm(), 30, 490);
                  text("epsilon 1 " + "   " + Modello.getEpsilon1(), 30, 520);
                  text("epsilon 2 " + "   " + Modello.getEpsilon2(), 30, 550);
                fill(0);
                rect(405, 500, 40, 40);
                image(img_stop, 410, 500);
        }
    }
    
} 
  
void keyPressed() {
  
  if( avoid_writing == true )
  {
    fill(0);
        
       if( key >= '0' && key <='9' )
       {      
          if( i <= 2)
          {
             inputValue[i] = key - '0';
             s = str(inputValue[i]);
             text( s, 210+i*10, 402+select*30);
             i++;
          }
       }
       else if( int(key) == 46 )
       {
          if( i == 1)
          {
             inputValue[i] = (int)key;
             text( key, 210+i*10, 402+select*30);
             i++;
          } 
       }
       else if( int(key) == 10 )
       {
           if(i == 3)
           {
              if( inputValue[1] == 46)
              {   
                 input = inputValue[0] + inputValue[2] * 0.1;
              }
              else input = inputValue[0] * 100 + inputValue[1] * 10 + inputValue[2];
           } 
           else if( i == 2){
              input = inputValue[0] * 10 + inputValue[1];
           }
           else input = inputValue[0];
           
           fill(0);
           
           if(select==1){
                rect(95, 415, 45, 20); 
                alfa = input;
                fill(255);
                text("alpha         " + "  " + input, 30, 430);
           }
           else if(select==2){
                rect(95, 445, 45, 20); 
                beta = input;
                fill(255);
                text("beta          " + "   " + input, 30, 460);
           }
           else if(select==3){
                rect(95, 475, 45, 20); 
                tm = input;
                fill(255);
                text("tm            " + "     " + input, 30, 490);
           }
           else if(select==4){
                rect(95, 505, 45, 20); 
                e1 = input;
                fill(255);
                text("epsilon 1 " + "   " + input, 30, 520);
           }
           else if(select==5){
                rect(95, 535, 45, 20); 
                fill(255);
                if( isPlaying == true ){
                   Modello.setEpsilon2(input);
                   text("epsilon 2 " + "   " + Modello.getEpsilon2(), 30, 550);
                }
                else e2 = input;  
                text("epsilon 2 " + "   " + input, 30, 550);
           }
                     
           rect(200, 385+select*30, 70, 20); 
           i = 0;
           select = -1;
       }
       else if( int(key) == 8 )
       {
          if( i>0 )
          {
            fill(255);
            stroke(255);
            i--;
            rect(210+i*10, 387+select*30, 10, 15);          
          }
       }       
    
  }
}




}}}